name: Deploy Storage Account
on:
  push:
    paths:
      - 'deployed_resources/storage_accounts/**'

permissions: write-all

jobs:
    job1:
      name: Run PowerShell Script
      runs-on: windows-latest
      outputs:
        fileName: ${{ steps.findfile.outputs.fileName }}
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0  # Fetches the commit history to compare changes

        - name: Find Added or Updated File
          id: findfile
          shell: pwsh
          run: |
            # Save the output of git diff to a variable, filtering for added and modified files
            $diffOutput = git diff --name-only --diff-filter=arD HEAD HEAD~1
            echo "Diff Output: $diffOutput"
            
            $addedOrUpdatedFiles = @()
          
            # Loop through each line of diffOutput
            foreach ($line in $diffOutput -split "`n") {
              if ($line -match 'storage_accounts/') {
                $addedOrUpdatedFiles += $line
              }
            }
        
            # Check if addedOrUpdatedFiles is not empty
            if ($addedOrUpdatedFiles.Count -gt 0) {
              $fileName = $addedOrUpdatedFiles -join ', '
              echo "fileName=$fileName" >> $env:GITHUB_OUTPUT
              echo "File Name: $fileName"
            } else {
              echo "No new or updated files in 'storage_accounts/'"
              echo "Exiting action as no relevant changes were detected."
              exit 0 # Exits the script successfully, indicating no need for further action
            }
          

    job2:
      needs: job1
      name: Run PowerShell Script
      runs-on: windows-latest
      steps:

        - uses: actions/checkout@v4
          with:
            fetch-depth: 0  # Fetches the commit history to compare changes        
        - name: Script
          shell: pwsh
          env:
            CLIENT_ID: ${{ secrets.CLIENT_ID }}
            CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
            SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
            TENANT_ID: ${{ secrets.TENANT_ID }}
            FILE_NAME: ${{ needs.job1.outputs.fileName }}
          run: |
            echo "File name: $env:FILE_NAME"
            .\deployment_scripts\storage_accounts\create-storage.ps1 -fileName $env:FILE_NAME

